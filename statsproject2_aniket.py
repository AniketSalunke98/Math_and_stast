# -*- coding: utf-8 -*-
"""StatsProject2_Aniket.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Y-EgV7R_fJnrobAKfNDsV8maJM11AmD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# Load the dataset

dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv

# Display the first few rows and summary statistics
dv.head(20)
dv.describe()

# Handle missing values
dv.isnull()
dv

# Convert data types if necessary
change_datatype={'Quantity ordered new':int}
dv=dv.astype(change_datatype)
dv.dtypes

# Create any new columns needed for analysis
dv['Total_Price']=dv['Unit Price'] + dv['Shipping Cost']
dv

# Univariate analysis
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
plt.title('Distribution of Sales')
sns.histplot(dv['Sales'])
plt.xlabel('Sales')
plt.ylabel('Count')
plt.show()

dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
plt.title('Count of orders by Region')
sns.countplot(x='Region',data=dv)
plt.ylabel('count')
plt.show()

# Bivariate analysis

dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
plt.title('Sales vs Profit')
sns.scatterplot(x='Sales',y='Profit',data=dv)
plt.show()

# Bivariate analysis
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
plt.title('Sales by Region')
sns.boxplot(x='Region',y='Sales',data=dv)
plt.show()

# Summary statistics for key variables
dv.describe()

# Grouped statistics
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv.groupby('Region')['Sales'].mean()

dv.groupby('Product Category')['Profit'].mean()

from scipy.stats import ttest_ind, chi2_contingency

# Example: T-test for sales in different regions

resion=dv['Region']
sales=dv['Sales']
t_statistic, p_value = ttest_ind(sales[resion == 'East'], sales[resion == 'West'])
print(f"T-statistic: {t_statistic}, P-value: {p_value}")

from scipy.stats import ttest_ind, chi2_contingency
# Example: Chi-square test for independence between Ship Mode and Customer Segment

# Selecting only numeric columns for correlation matrix
plt.title('Correlation Matrix')
number_col=dv.select_dtypes(include=[np.number])
sns.heatmap(number_col.corr(),cmap='coolwarm',annot=True,annot_kws={'size': 5})
plt.show()

import statsmodels.api as sm

# Example: Linear regression analysis for Sales prediction
x=dv[['Quantity ordered new','Discount','Shipping Cost']]
y=dv['Sales']
x=sm.add_constant(x)
model=sm.OLS(y,x).fit()
print(model.summary())

# Plotting sales trends over time
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv['Order Date'] = pd.to_datetime(dv['Order Date'])

# Set 'Order Date' as the index
dv.set_index('Order Date', inplace=True)

# Resample by month and sum sales
monthly_sales = dv['Sales'].resample('M').sum()

# Plotting the monthly sales
plt.figure(figsize=(10, 6))
monthly_sales.plot(kind='line', marker='o', linestyle='-', color='b')
plt.title('Monthly Sales Trend')
plt.xlabel('Date')
plt.ylabel('Total Sales')
plt.grid(True)
plt.xticks(rotation= 45)
plt.tight_layout()
plt.show()


# Resample sales data by month

# Plotting profit trends over time

dv=pd.read_excel('sample-superstore-subset-excel.xlsx')

dv['Order Date'] = pd.to_datetime(dv['Order Date'])


dv.set_index('Order Date', inplace=True)


monthly_profit = dv['Profit'].resample('M').sum()


plt.figure(figsize=(15, 7))
monthly_profit.plot(kind='line', marker='o', linestyle='-', color='r')
plt.title('Monthly Profit Trend')
plt.xlabel('Date')
plt.ylabel('Total Profit')
plt.grid(True)
plt.xticks(rotation=65)
plt.tight_layout()
plt.show()

# Identifying top-performing product categories based on total sales and profit


dv['Sales'] = pd.to_numeric(dv['Sales'])


category_col = 'Product Category'


category_sales = dv.groupby(category_col)['Sales'].sum().reset_index()

category_sales = category_sales.sort_values(by='Sales', ascending=False)


sns.set(style='whitegrid')


plt.figure(figsize=(9, 6))
sns.barplot(data=category_sales, x=category_col, y='Sales', palette='viridis')


plt.title('Total Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)

plt.show()

# Plotting total profit by product category




dv['Sales'] = pd.to_numeric(dv['Sales'])


dv['Profit'] = pd.to_numeric(dv['Profit'])


category_col = 'Product Category'  #this to the correct column name


category_sales = dv.groupby(category_col)['Sales'].sum().reset_index()


category_sales = category_sales.sort_values(by='Sales', ascending=False)

sns.set(style='whitegrid')

# Create bar plot for total sales by category
plt.figure(figsize=(13, 6))
sns.barplot(data=category_sales, x=category_col, y='Sales', palette='viridis')

#  titles Names and labels
plt.title('Total Profit by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Profit')
plt.xticks(rotation=45)
plt.show()

# Generating summary statistics for each region
summary_stats=dv.groupby('Region').describe()

# Display summary statistics

summary_stats

# Visualizing the correlation between sales and profit

dv.plot(kind='scatter',x='Sales',y='Profit',title='correlation between sales and profit')





# Displaying the correlation coefficient

plt.show()

# Analyzing seasonal sales trends

# Grouping sales data by month and year
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv['Order Date']=pd.to_datetime(dv['Order Date'])
dv['Month']=dv['Order Date'].dt.month
dv['Year']=dv['Order Date'].dt.year
dv.head(5)

# Plotting seasonal sales trends
correlation = dv[['Month', 'Year']].corr()
plt.figure(figsize=(2, 6))
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('seasonal sales trends')
plt.show()

# Comparing sales across different ship modes

dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv['Sales'] = pd.to_numeric(dv['Sales'])

# column names to verify
("Column names in the DataFrame:")
(dv.columns)
# Group sales data by shipping mode and sum the sales
sales_by_mode = dv.groupby('Ship Mode')['Sales'].sum().reset_index()

# Print the summarized sales data

(sales_by_mode)

# Set the style of the visualization
sns.set(style='whitegrid')

# Plotting sales by shipping mode
plt.figure(figsize=(12, 7))
sns.barplot(data=sales_by_mode, x='Ship Mode', y='Sales', palette='viridis')

# Add titles and labels
plt.title('Total Sales by Shipping Mode', fontsize=10)
plt.xlabel('Shipping Mode', fontsize=10)
plt.ylabel('Total Sales', fontsize=10)
plt.show()

# Ensure column names are clean

dv.columns = dv.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('-', '_')

(dv.columns)



# Ensure 'Ship Date' column is datetime type

# Dropping rows where 'Ship Date' couldn't be converted


# Resample sales data by
dv=pd.read_excel('sample-superstore-subset-excel.xlsx')
dv['Order Date']=pd.to_datetime(dv['Order Date'])
dv['Month']=dv['Order Date'].dt.month
dv['Year']=dv['Order Date'].dt.year
dv.head(5)
plt.figure(figsize=(8, 6))
plt.plot(dv['Year'],dv['Sales'],marker='o',linestyle = 'solid')
plt.title('Monthly Sales Trends')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.xticks(rotation=45)
plt.show()

